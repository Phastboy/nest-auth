# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthResponse {
  message: String!
  tokens: TokenPair!
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type Category {
  _count: CategoryCount!
  children: [Category!]
  createdAt: DateTime!
  events: [Event!]
  id: ID!
  name: String!
  parent: Category
  parentId: Int
  posts: [Post!]
  slug: String!
}

type CategoryAvgAggregate {
  id: Float
  parentId: Float
}

type CategoryCount {
  children: Int!
  events: Int!
  posts: Int!
}

type CategoryCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  name: Int!
  parentId: Int!
  slug: Int!
}

input CategoryCreateInput {
  children: CategoryCreateNestedManyWithoutParentInput
  createdAt: DateTime
  events: EventCreateNestedManyWithoutCategoriesInput
  name: String!
  parent: CategoryCreateNestedOneWithoutChildrenInput
  posts: PostCreateNestedManyWithoutCategoriesInput
  slug: String!
}

input CategoryCreateManyParentInput {
  createdAt: DateTime
  id: Int
  name: String!
  slug: String!
}

input CategoryCreateManyParentInputEnvelope {
  data: [CategoryCreateManyParentInput!]!
}

input CategoryCreateNestedManyWithoutEventsInput {
  connect: [CategoryWhereUniqueInput!]
  connectOrCreate: [CategoryCreateOrConnectWithoutEventsInput!]
  create: [CategoryCreateWithoutEventsInput!]
}

input CategoryCreateNestedManyWithoutParentInput {
  connect: [CategoryWhereUniqueInput!]
  connectOrCreate: [CategoryCreateOrConnectWithoutParentInput!]
  create: [CategoryCreateWithoutParentInput!]
  createMany: CategoryCreateManyParentInputEnvelope
}

input CategoryCreateNestedManyWithoutPostsInput {
  connect: [CategoryWhereUniqueInput!]
  connectOrCreate: [CategoryCreateOrConnectWithoutPostsInput!]
  create: [CategoryCreateWithoutPostsInput!]
}

input CategoryCreateNestedOneWithoutChildrenInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutChildrenInput
  create: CategoryCreateWithoutChildrenInput
}

input CategoryCreateOrConnectWithoutChildrenInput {
  create: CategoryCreateWithoutChildrenInput!
  where: CategoryWhereUniqueInput!
}

input CategoryCreateOrConnectWithoutEventsInput {
  create: CategoryCreateWithoutEventsInput!
  where: CategoryWhereUniqueInput!
}

input CategoryCreateOrConnectWithoutParentInput {
  create: CategoryCreateWithoutParentInput!
  where: CategoryWhereUniqueInput!
}

input CategoryCreateOrConnectWithoutPostsInput {
  create: CategoryCreateWithoutPostsInput!
  where: CategoryWhereUniqueInput!
}

input CategoryCreateWithoutChildrenInput {
  createdAt: DateTime
  events: EventCreateNestedManyWithoutCategoriesInput
  name: String!
  parent: CategoryCreateNestedOneWithoutChildrenInput
  posts: PostCreateNestedManyWithoutCategoriesInput
  slug: String!
}

input CategoryCreateWithoutEventsInput {
  children: CategoryCreateNestedManyWithoutParentInput
  createdAt: DateTime
  name: String!
  parent: CategoryCreateNestedOneWithoutChildrenInput
  posts: PostCreateNestedManyWithoutCategoriesInput
  slug: String!
}

input CategoryCreateWithoutParentInput {
  children: CategoryCreateNestedManyWithoutParentInput
  createdAt: DateTime
  events: EventCreateNestedManyWithoutCategoriesInput
  name: String!
  posts: PostCreateNestedManyWithoutCategoriesInput
  slug: String!
}

input CategoryCreateWithoutPostsInput {
  children: CategoryCreateNestedManyWithoutParentInput
  createdAt: DateTime
  events: EventCreateNestedManyWithoutCategoriesInput
  name: String!
  parent: CategoryCreateNestedOneWithoutChildrenInput
  slug: String!
}

input CategoryListRelationFilter {
  every: CategoryWhereInput
  none: CategoryWhereInput
  some: CategoryWhereInput
}

type CategoryMaxAggregate {
  createdAt: DateTime
  id: Int
  name: String
  parentId: Int
  slug: String
}

type CategoryMinAggregate {
  createdAt: DateTime
  id: Int
  name: String
  parentId: Int
  slug: String
}

input CategoryNullableScalarRelationFilter {
  is: CategoryWhereInput
  isNot: CategoryWhereInput
}

input CategoryScalarWhereInput {
  AND: [CategoryScalarWhereInput!]
  NOT: [CategoryScalarWhereInput!]
  OR: [CategoryScalarWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  parentId: IntNullableFilter
  slug: StringFilter
}

type CategorySumAggregate {
  id: Int
  parentId: Int
}

input CategoryUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
}

input CategoryUpdateManyWithWhereWithoutEventsInput {
  data: CategoryUpdateManyMutationInput!
  where: CategoryScalarWhereInput!
}

input CategoryUpdateManyWithWhereWithoutParentInput {
  data: CategoryUpdateManyMutationInput!
  where: CategoryScalarWhereInput!
}

input CategoryUpdateManyWithWhereWithoutPostsInput {
  data: CategoryUpdateManyMutationInput!
  where: CategoryScalarWhereInput!
}

input CategoryUpdateManyWithoutEventsNestedInput {
  connect: [CategoryWhereUniqueInput!]
  connectOrCreate: [CategoryCreateOrConnectWithoutEventsInput!]
  create: [CategoryCreateWithoutEventsInput!]
  delete: [CategoryWhereUniqueInput!]
  deleteMany: [CategoryScalarWhereInput!]
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutEventsInput!]
  updateMany: [CategoryUpdateManyWithWhereWithoutEventsInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutEventsInput!]
}

input CategoryUpdateManyWithoutParentNestedInput {
  connect: [CategoryWhereUniqueInput!]
  connectOrCreate: [CategoryCreateOrConnectWithoutParentInput!]
  create: [CategoryCreateWithoutParentInput!]
  createMany: CategoryCreateManyParentInputEnvelope
  delete: [CategoryWhereUniqueInput!]
  deleteMany: [CategoryScalarWhereInput!]
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutParentInput!]
  updateMany: [CategoryUpdateManyWithWhereWithoutParentInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutParentInput!]
}

input CategoryUpdateManyWithoutPostsNestedInput {
  connect: [CategoryWhereUniqueInput!]
  connectOrCreate: [CategoryCreateOrConnectWithoutPostsInput!]
  create: [CategoryCreateWithoutPostsInput!]
  delete: [CategoryWhereUniqueInput!]
  deleteMany: [CategoryScalarWhereInput!]
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutPostsInput!]
  updateMany: [CategoryUpdateManyWithWhereWithoutPostsInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutPostsInput!]
}

input CategoryUpdateOneWithoutChildrenNestedInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutChildrenInput
  create: CategoryCreateWithoutChildrenInput
  delete: CategoryWhereInput
  disconnect: CategoryWhereInput
  update: CategoryUpdateToOneWithWhereWithoutChildrenInput
  upsert: CategoryUpsertWithoutChildrenInput
}

input CategoryUpdateToOneWithWhereWithoutChildrenInput {
  data: CategoryUpdateWithoutChildrenInput!
  where: CategoryWhereInput
}

input CategoryUpdateWithWhereUniqueWithoutEventsInput {
  data: CategoryUpdateWithoutEventsInput!
  where: CategoryWhereUniqueInput!
}

input CategoryUpdateWithWhereUniqueWithoutParentInput {
  data: CategoryUpdateWithoutParentInput!
  where: CategoryWhereUniqueInput!
}

input CategoryUpdateWithWhereUniqueWithoutPostsInput {
  data: CategoryUpdateWithoutPostsInput!
  where: CategoryWhereUniqueInput!
}

input CategoryUpdateWithoutChildrenInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  events: EventUpdateManyWithoutCategoriesNestedInput
  name: StringFieldUpdateOperationsInput
  parent: CategoryUpdateOneWithoutChildrenNestedInput
  posts: PostUpdateManyWithoutCategoriesNestedInput
  slug: StringFieldUpdateOperationsInput
}

input CategoryUpdateWithoutEventsInput {
  children: CategoryUpdateManyWithoutParentNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  parent: CategoryUpdateOneWithoutChildrenNestedInput
  posts: PostUpdateManyWithoutCategoriesNestedInput
  slug: StringFieldUpdateOperationsInput
}

input CategoryUpdateWithoutParentInput {
  children: CategoryUpdateManyWithoutParentNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  events: EventUpdateManyWithoutCategoriesNestedInput
  name: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutCategoriesNestedInput
  slug: StringFieldUpdateOperationsInput
}

input CategoryUpdateWithoutPostsInput {
  children: CategoryUpdateManyWithoutParentNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  events: EventUpdateManyWithoutCategoriesNestedInput
  name: StringFieldUpdateOperationsInput
  parent: CategoryUpdateOneWithoutChildrenNestedInput
  slug: StringFieldUpdateOperationsInput
}

input CategoryUpsertWithWhereUniqueWithoutEventsInput {
  create: CategoryCreateWithoutEventsInput!
  update: CategoryUpdateWithoutEventsInput!
  where: CategoryWhereUniqueInput!
}

input CategoryUpsertWithWhereUniqueWithoutParentInput {
  create: CategoryCreateWithoutParentInput!
  update: CategoryUpdateWithoutParentInput!
  where: CategoryWhereUniqueInput!
}

input CategoryUpsertWithWhereUniqueWithoutPostsInput {
  create: CategoryCreateWithoutPostsInput!
  update: CategoryUpdateWithoutPostsInput!
  where: CategoryWhereUniqueInput!
}

input CategoryUpsertWithoutChildrenInput {
  create: CategoryCreateWithoutChildrenInput!
  update: CategoryUpdateWithoutChildrenInput!
  where: CategoryWhereInput
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  children: CategoryListRelationFilter
  createdAt: DateTimeFilter
  events: EventListRelationFilter
  id: IntFilter
  name: StringFilter
  parent: CategoryNullableScalarRelationFilter
  parentId: IntNullableFilter
  posts: PostListRelationFilter
  slug: StringFilter
}

input CategoryWhereUniqueInput {
  AND: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  children: CategoryListRelationFilter
  createdAt: DateTimeFilter
  events: EventListRelationFilter
  id: Int
  name: String
  parent: CategoryNullableScalarRelationFilter
  parentId: IntNullableFilter
  posts: PostListRelationFilter
  slug: String
}

type Comment {
  _count: CommentCount!
  content: String!
  createdAt: DateTime!
  event: Event
  eventId: Int
  id: ID!
  parent: Comment
  parentId: Int
  post: Post
  postId: Int
  replies: [Comment!]
  user: User!
  userId: Int!
}

type CommentAvgAggregate {
  eventId: Float
  id: Float
  parentId: Float
  postId: Float
  userId: Float
}

type CommentCount {
  replies: Int!
}

type CommentCountAggregate {
  _all: Int!
  content: Int!
  createdAt: Int!
  eventId: Int!
  id: Int!
  parentId: Int!
  postId: Int!
  userId: Int!
}

input CommentCreateManyEventInput {
  content: String!
  createdAt: DateTime
  id: Int
  parentId: Int
  postId: Int
  userId: Int!
}

input CommentCreateManyEventInputEnvelope {
  data: [CommentCreateManyEventInput!]!
}

input CommentCreateManyParentInput {
  content: String!
  createdAt: DateTime
  eventId: Int
  id: Int
  postId: Int
  userId: Int!
}

input CommentCreateManyParentInputEnvelope {
  data: [CommentCreateManyParentInput!]!
}

input CommentCreateManyPostInput {
  content: String!
  createdAt: DateTime
  eventId: Int
  id: Int
  parentId: Int
  userId: Int!
}

input CommentCreateManyPostInputEnvelope {
  data: [CommentCreateManyPostInput!]!
}

input CommentCreateManyUserInput {
  content: String!
  createdAt: DateTime
  eventId: Int
  id: Int
  parentId: Int
  postId: Int
}

input CommentCreateManyUserInputEnvelope {
  data: [CommentCreateManyUserInput!]!
}

input CommentCreateNestedManyWithoutEventInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutEventInput!]
  create: [CommentCreateWithoutEventInput!]
  createMany: CommentCreateManyEventInputEnvelope
}

input CommentCreateNestedManyWithoutParentInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutParentInput!]
  create: [CommentCreateWithoutParentInput!]
  createMany: CommentCreateManyParentInputEnvelope
}

input CommentCreateNestedManyWithoutPostInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutPostInput!]
  create: [CommentCreateWithoutPostInput!]
  createMany: CommentCreateManyPostInputEnvelope
}

input CommentCreateNestedManyWithoutUserInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutUserInput!]
  create: [CommentCreateWithoutUserInput!]
  createMany: CommentCreateManyUserInputEnvelope
}

input CommentCreateNestedOneWithoutRepliesInput {
  connect: CommentWhereUniqueInput
  connectOrCreate: CommentCreateOrConnectWithoutRepliesInput
  create: CommentCreateWithoutRepliesInput
}

input CommentCreateOrConnectWithoutEventInput {
  create: CommentCreateWithoutEventInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutParentInput {
  create: CommentCreateWithoutParentInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutPostInput {
  create: CommentCreateWithoutPostInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutRepliesInput {
  create: CommentCreateWithoutRepliesInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutUserInput {
  create: CommentCreateWithoutUserInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateWithoutEventInput {
  content: String!
  createdAt: DateTime
  parent: CommentCreateNestedOneWithoutRepliesInput
  post: PostCreateNestedOneWithoutCommentsInput
  replies: CommentCreateNestedManyWithoutParentInput
  user: UserCreateNestedOneWithoutCommentsInput!
}

input CommentCreateWithoutParentInput {
  content: String!
  createdAt: DateTime
  event: EventCreateNestedOneWithoutCommentsInput
  post: PostCreateNestedOneWithoutCommentsInput
  replies: CommentCreateNestedManyWithoutParentInput
  user: UserCreateNestedOneWithoutCommentsInput!
}

input CommentCreateWithoutPostInput {
  content: String!
  createdAt: DateTime
  event: EventCreateNestedOneWithoutCommentsInput
  parent: CommentCreateNestedOneWithoutRepliesInput
  replies: CommentCreateNestedManyWithoutParentInput
  user: UserCreateNestedOneWithoutCommentsInput!
}

input CommentCreateWithoutRepliesInput {
  content: String!
  createdAt: DateTime
  event: EventCreateNestedOneWithoutCommentsInput
  parent: CommentCreateNestedOneWithoutRepliesInput
  post: PostCreateNestedOneWithoutCommentsInput
  user: UserCreateNestedOneWithoutCommentsInput!
}

input CommentCreateWithoutUserInput {
  content: String!
  createdAt: DateTime
  event: EventCreateNestedOneWithoutCommentsInput
  parent: CommentCreateNestedOneWithoutRepliesInput
  post: PostCreateNestedOneWithoutCommentsInput
  replies: CommentCreateNestedManyWithoutParentInput
}

input CommentListRelationFilter {
  every: CommentWhereInput
  none: CommentWhereInput
  some: CommentWhereInput
}

type CommentMaxAggregate {
  content: String
  createdAt: DateTime
  eventId: Int
  id: Int
  parentId: Int
  postId: Int
  userId: Int
}

type CommentMinAggregate {
  content: String
  createdAt: DateTime
  eventId: Int
  id: Int
  parentId: Int
  postId: Int
  userId: Int
}

input CommentNullableScalarRelationFilter {
  is: CommentWhereInput
  isNot: CommentWhereInput
}

input CommentScalarWhereInput {
  AND: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  eventId: IntNullableFilter
  id: IntFilter
  parentId: IntNullableFilter
  postId: IntNullableFilter
  userId: IntFilter
}

type CommentSumAggregate {
  eventId: Int
  id: Int
  parentId: Int
  postId: Int
  userId: Int
}

input CommentUpdateInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  event: EventUpdateOneWithoutCommentsNestedInput
  parent: CommentUpdateOneWithoutRepliesNestedInput
  post: PostUpdateOneWithoutCommentsNestedInput
  replies: CommentUpdateManyWithoutParentNestedInput
  user: UserUpdateOneRequiredWithoutCommentsNestedInput
}

input CommentUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateManyWithWhereWithoutEventInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithWhereWithoutParentInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithWhereWithoutPostInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithWhereWithoutUserInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithoutEventNestedInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutEventInput!]
  create: [CommentCreateWithoutEventInput!]
  createMany: CommentCreateManyEventInputEnvelope
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutEventInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutEventInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutEventInput!]
}

input CommentUpdateManyWithoutParentNestedInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutParentInput!]
  create: [CommentCreateWithoutParentInput!]
  createMany: CommentCreateManyParentInputEnvelope
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutParentInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutParentInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutParentInput!]
}

input CommentUpdateManyWithoutPostNestedInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutPostInput!]
  create: [CommentCreateWithoutPostInput!]
  createMany: CommentCreateManyPostInputEnvelope
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutPostInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]
}

input CommentUpdateManyWithoutUserNestedInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutUserInput!]
  create: [CommentCreateWithoutUserInput!]
  createMany: CommentCreateManyUserInputEnvelope
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutUserInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutUserInput!]
}

input CommentUpdateOneWithoutRepliesNestedInput {
  connect: CommentWhereUniqueInput
  connectOrCreate: CommentCreateOrConnectWithoutRepliesInput
  create: CommentCreateWithoutRepliesInput
  delete: CommentWhereInput
  disconnect: CommentWhereInput
  update: CommentUpdateToOneWithWhereWithoutRepliesInput
  upsert: CommentUpsertWithoutRepliesInput
}

input CommentUpdateToOneWithWhereWithoutRepliesInput {
  data: CommentUpdateWithoutRepliesInput!
  where: CommentWhereInput
}

input CommentUpdateWithWhereUniqueWithoutEventInput {
  data: CommentUpdateWithoutEventInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutParentInput {
  data: CommentUpdateWithoutParentInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutPostInput {
  data: CommentUpdateWithoutPostInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutUserInput {
  data: CommentUpdateWithoutUserInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithoutEventInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  parent: CommentUpdateOneWithoutRepliesNestedInput
  post: PostUpdateOneWithoutCommentsNestedInput
  replies: CommentUpdateManyWithoutParentNestedInput
  user: UserUpdateOneRequiredWithoutCommentsNestedInput
}

input CommentUpdateWithoutParentInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  event: EventUpdateOneWithoutCommentsNestedInput
  post: PostUpdateOneWithoutCommentsNestedInput
  replies: CommentUpdateManyWithoutParentNestedInput
  user: UserUpdateOneRequiredWithoutCommentsNestedInput
}

input CommentUpdateWithoutPostInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  event: EventUpdateOneWithoutCommentsNestedInput
  parent: CommentUpdateOneWithoutRepliesNestedInput
  replies: CommentUpdateManyWithoutParentNestedInput
  user: UserUpdateOneRequiredWithoutCommentsNestedInput
}

input CommentUpdateWithoutRepliesInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  event: EventUpdateOneWithoutCommentsNestedInput
  parent: CommentUpdateOneWithoutRepliesNestedInput
  post: PostUpdateOneWithoutCommentsNestedInput
  user: UserUpdateOneRequiredWithoutCommentsNestedInput
}

input CommentUpdateWithoutUserInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  event: EventUpdateOneWithoutCommentsNestedInput
  parent: CommentUpdateOneWithoutRepliesNestedInput
  post: PostUpdateOneWithoutCommentsNestedInput
  replies: CommentUpdateManyWithoutParentNestedInput
}

input CommentUpsertWithWhereUniqueWithoutEventInput {
  create: CommentCreateWithoutEventInput!
  update: CommentUpdateWithoutEventInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutParentInput {
  create: CommentCreateWithoutParentInput!
  update: CommentUpdateWithoutParentInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutPostInput {
  create: CommentCreateWithoutPostInput!
  update: CommentUpdateWithoutPostInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutUserInput {
  create: CommentCreateWithoutUserInput!
  update: CommentUpdateWithoutUserInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithoutRepliesInput {
  create: CommentCreateWithoutRepliesInput!
  update: CommentUpdateWithoutRepliesInput!
  where: CommentWhereInput
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  event: EventNullableScalarRelationFilter
  eventId: IntNullableFilter
  id: IntFilter
  parent: CommentNullableScalarRelationFilter
  parentId: IntNullableFilter
  post: PostNullableScalarRelationFilter
  postId: IntNullableFilter
  replies: CommentListRelationFilter
  user: UserScalarRelationFilter
  userId: IntFilter
}

input CommentWhereUniqueInput {
  AND: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  event: EventNullableScalarRelationFilter
  eventId: IntNullableFilter
  id: Int
  parent: CommentNullableScalarRelationFilter
  parentId: IntNullableFilter
  post: PostNullableScalarRelationFilter
  postId: IntNullableFilter
  replies: CommentListRelationFilter
  user: UserScalarRelationFilter
  userId: IntFilter
}

input CreateCommentInput {
  content: String!
}

input CreateNotificationInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input CreatePostInput {
  content: String!
  image: String
  isEvent: Boolean
}

input CreateRsvpInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

type Event {
  _count: EventCount!
  categories: [Category!]
  comments: [Comment!]
  createdAt: DateTime!
  description: String!
  endTime: DateTime
  id: ID!
  image: String
  likes: [Like!]
  location: String!
  post: Post!
  postId: Int!
  rsvps: [RSVP!]
  startTime: DateTime!
  title: String!
  updatedAt: DateTime!
  user: User!
  userId: Int!
}

type EventAvgAggregate {
  id: Float
  postId: Float
  userId: Float
}

type EventCount {
  categories: Int!
  comments: Int!
  likes: Int!
  rsvps: Int!
}

type EventCountAggregate {
  _all: Int!
  createdAt: Int!
  description: Int!
  endTime: Int!
  id: Int!
  image: Int!
  location: Int!
  postId: Int!
  startTime: Int!
  title: Int!
  updatedAt: Int!
  userId: Int!
}

input EventCreateInput {
  categories: CategoryCreateNestedManyWithoutEventsInput
  comments: CommentCreateNestedManyWithoutEventInput
  createdAt: DateTime
  description: String!
  endTime: DateTime
  image: String
  likes: LikeCreateNestedManyWithoutEventInput
  location: String!
  post: PostCreateNestedOneWithoutEventInput!
  rsvps: RSVPCreateNestedManyWithoutEventInput
  startTime: DateTime!
  title: String!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutEventsInput!
}

input EventCreateManyUserInput {
  createdAt: DateTime
  description: String!
  endTime: DateTime
  id: Int
  image: String
  location: String!
  postId: Int!
  startTime: DateTime!
  title: String!
  updatedAt: DateTime
}

input EventCreateManyUserInputEnvelope {
  data: [EventCreateManyUserInput!]!
}

input EventCreateNestedManyWithoutCategoriesInput {
  connect: [EventWhereUniqueInput!]
  connectOrCreate: [EventCreateOrConnectWithoutCategoriesInput!]
  create: [EventCreateWithoutCategoriesInput!]
}

input EventCreateNestedManyWithoutUserInput {
  connect: [EventWhereUniqueInput!]
  connectOrCreate: [EventCreateOrConnectWithoutUserInput!]
  create: [EventCreateWithoutUserInput!]
  createMany: EventCreateManyUserInputEnvelope
}

input EventCreateNestedOneWithoutCommentsInput {
  connect: EventWhereUniqueInput
  connectOrCreate: EventCreateOrConnectWithoutCommentsInput
  create: EventCreateWithoutCommentsInput
}

input EventCreateNestedOneWithoutLikesInput {
  connect: EventWhereUniqueInput
  connectOrCreate: EventCreateOrConnectWithoutLikesInput
  create: EventCreateWithoutLikesInput
}

input EventCreateNestedOneWithoutPostInput {
  connect: EventWhereUniqueInput
  connectOrCreate: EventCreateOrConnectWithoutPostInput
  create: EventCreateWithoutPostInput
}

input EventCreateNestedOneWithoutRsvpsInput {
  connect: EventWhereUniqueInput
  connectOrCreate: EventCreateOrConnectWithoutRsvpsInput
  create: EventCreateWithoutRsvpsInput
}

input EventCreateOrConnectWithoutCategoriesInput {
  create: EventCreateWithoutCategoriesInput!
  where: EventWhereUniqueInput!
}

input EventCreateOrConnectWithoutCommentsInput {
  create: EventCreateWithoutCommentsInput!
  where: EventWhereUniqueInput!
}

input EventCreateOrConnectWithoutLikesInput {
  create: EventCreateWithoutLikesInput!
  where: EventWhereUniqueInput!
}

input EventCreateOrConnectWithoutPostInput {
  create: EventCreateWithoutPostInput!
  where: EventWhereUniqueInput!
}

input EventCreateOrConnectWithoutRsvpsInput {
  create: EventCreateWithoutRsvpsInput!
  where: EventWhereUniqueInput!
}

input EventCreateOrConnectWithoutUserInput {
  create: EventCreateWithoutUserInput!
  where: EventWhereUniqueInput!
}

input EventCreateWithoutCategoriesInput {
  comments: CommentCreateNestedManyWithoutEventInput
  createdAt: DateTime
  description: String!
  endTime: DateTime
  image: String
  likes: LikeCreateNestedManyWithoutEventInput
  location: String!
  post: PostCreateNestedOneWithoutEventInput!
  rsvps: RSVPCreateNestedManyWithoutEventInput
  startTime: DateTime!
  title: String!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutEventsInput!
}

input EventCreateWithoutCommentsInput {
  categories: CategoryCreateNestedManyWithoutEventsInput
  createdAt: DateTime
  description: String!
  endTime: DateTime
  image: String
  likes: LikeCreateNestedManyWithoutEventInput
  location: String!
  post: PostCreateNestedOneWithoutEventInput!
  rsvps: RSVPCreateNestedManyWithoutEventInput
  startTime: DateTime!
  title: String!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutEventsInput!
}

input EventCreateWithoutLikesInput {
  categories: CategoryCreateNestedManyWithoutEventsInput
  comments: CommentCreateNestedManyWithoutEventInput
  createdAt: DateTime
  description: String!
  endTime: DateTime
  image: String
  location: String!
  post: PostCreateNestedOneWithoutEventInput!
  rsvps: RSVPCreateNestedManyWithoutEventInput
  startTime: DateTime!
  title: String!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutEventsInput!
}

input EventCreateWithoutPostInput {
  categories: CategoryCreateNestedManyWithoutEventsInput
  comments: CommentCreateNestedManyWithoutEventInput
  createdAt: DateTime
  description: String!
  endTime: DateTime
  image: String
  likes: LikeCreateNestedManyWithoutEventInput
  location: String!
  rsvps: RSVPCreateNestedManyWithoutEventInput
  startTime: DateTime!
  title: String!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutEventsInput!
}

input EventCreateWithoutRsvpsInput {
  categories: CategoryCreateNestedManyWithoutEventsInput
  comments: CommentCreateNestedManyWithoutEventInput
  createdAt: DateTime
  description: String!
  endTime: DateTime
  image: String
  likes: LikeCreateNestedManyWithoutEventInput
  location: String!
  post: PostCreateNestedOneWithoutEventInput!
  startTime: DateTime!
  title: String!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutEventsInput!
}

input EventCreateWithoutUserInput {
  categories: CategoryCreateNestedManyWithoutEventsInput
  comments: CommentCreateNestedManyWithoutEventInput
  createdAt: DateTime
  description: String!
  endTime: DateTime
  image: String
  likes: LikeCreateNestedManyWithoutEventInput
  location: String!
  post: PostCreateNestedOneWithoutEventInput!
  rsvps: RSVPCreateNestedManyWithoutEventInput
  startTime: DateTime!
  title: String!
  updatedAt: DateTime
}

input EventListRelationFilter {
  every: EventWhereInput
  none: EventWhereInput
  some: EventWhereInput
}

type EventMaxAggregate {
  createdAt: DateTime
  description: String
  endTime: DateTime
  id: Int
  image: String
  location: String
  postId: Int
  startTime: DateTime
  title: String
  updatedAt: DateTime
  userId: Int
}

type EventMinAggregate {
  createdAt: DateTime
  description: String
  endTime: DateTime
  id: Int
  image: String
  location: String
  postId: Int
  startTime: DateTime
  title: String
  updatedAt: DateTime
  userId: Int
}

input EventNullableScalarRelationFilter {
  is: EventWhereInput
  isNot: EventWhereInput
}

input EventScalarRelationFilter {
  is: EventWhereInput
  isNot: EventWhereInput
}

input EventScalarWhereInput {
  AND: [EventScalarWhereInput!]
  NOT: [EventScalarWhereInput!]
  OR: [EventScalarWhereInput!]
  createdAt: DateTimeFilter
  description: StringFilter
  endTime: DateTimeNullableFilter
  id: IntFilter
  image: StringNullableFilter
  location: StringFilter
  postId: IntFilter
  startTime: DateTimeFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  userId: IntFilter
}

type EventSumAggregate {
  id: Int
  postId: Int
  userId: Int
}

input EventUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  endTime: NullableDateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  location: StringFieldUpdateOperationsInput
  startTime: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EventUpdateManyWithWhereWithoutCategoriesInput {
  data: EventUpdateManyMutationInput!
  where: EventScalarWhereInput!
}

input EventUpdateManyWithWhereWithoutUserInput {
  data: EventUpdateManyMutationInput!
  where: EventScalarWhereInput!
}

input EventUpdateManyWithoutCategoriesNestedInput {
  connect: [EventWhereUniqueInput!]
  connectOrCreate: [EventCreateOrConnectWithoutCategoriesInput!]
  create: [EventCreateWithoutCategoriesInput!]
  delete: [EventWhereUniqueInput!]
  deleteMany: [EventScalarWhereInput!]
  disconnect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutCategoriesInput!]
  updateMany: [EventUpdateManyWithWhereWithoutCategoriesInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutCategoriesInput!]
}

input EventUpdateManyWithoutUserNestedInput {
  connect: [EventWhereUniqueInput!]
  connectOrCreate: [EventCreateOrConnectWithoutUserInput!]
  create: [EventCreateWithoutUserInput!]
  createMany: EventCreateManyUserInputEnvelope
  delete: [EventWhereUniqueInput!]
  deleteMany: [EventScalarWhereInput!]
  disconnect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [EventUpdateManyWithWhereWithoutUserInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutUserInput!]
}

input EventUpdateOneRequiredWithoutRsvpsNestedInput {
  connect: EventWhereUniqueInput
  connectOrCreate: EventCreateOrConnectWithoutRsvpsInput
  create: EventCreateWithoutRsvpsInput
  update: EventUpdateToOneWithWhereWithoutRsvpsInput
  upsert: EventUpsertWithoutRsvpsInput
}

input EventUpdateOneWithoutCommentsNestedInput {
  connect: EventWhereUniqueInput
  connectOrCreate: EventCreateOrConnectWithoutCommentsInput
  create: EventCreateWithoutCommentsInput
  delete: EventWhereInput
  disconnect: EventWhereInput
  update: EventUpdateToOneWithWhereWithoutCommentsInput
  upsert: EventUpsertWithoutCommentsInput
}

input EventUpdateOneWithoutLikesNestedInput {
  connect: EventWhereUniqueInput
  connectOrCreate: EventCreateOrConnectWithoutLikesInput
  create: EventCreateWithoutLikesInput
  delete: EventWhereInput
  disconnect: EventWhereInput
  update: EventUpdateToOneWithWhereWithoutLikesInput
  upsert: EventUpsertWithoutLikesInput
}

input EventUpdateOneWithoutPostNestedInput {
  connect: EventWhereUniqueInput
  connectOrCreate: EventCreateOrConnectWithoutPostInput
  create: EventCreateWithoutPostInput
  delete: EventWhereInput
  disconnect: EventWhereInput
  update: EventUpdateToOneWithWhereWithoutPostInput
  upsert: EventUpsertWithoutPostInput
}

input EventUpdateToOneWithWhereWithoutCommentsInput {
  data: EventUpdateWithoutCommentsInput!
  where: EventWhereInput
}

input EventUpdateToOneWithWhereWithoutLikesInput {
  data: EventUpdateWithoutLikesInput!
  where: EventWhereInput
}

input EventUpdateToOneWithWhereWithoutPostInput {
  data: EventUpdateWithoutPostInput!
  where: EventWhereInput
}

input EventUpdateToOneWithWhereWithoutRsvpsInput {
  data: EventUpdateWithoutRsvpsInput!
  where: EventWhereInput
}

input EventUpdateWithWhereUniqueWithoutCategoriesInput {
  data: EventUpdateWithoutCategoriesInput!
  where: EventWhereUniqueInput!
}

input EventUpdateWithWhereUniqueWithoutUserInput {
  data: EventUpdateWithoutUserInput!
  where: EventWhereUniqueInput!
}

input EventUpdateWithoutCategoriesInput {
  comments: CommentUpdateManyWithoutEventNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  endTime: NullableDateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  likes: LikeUpdateManyWithoutEventNestedInput
  location: StringFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutEventNestedInput
  rsvps: RSVPUpdateManyWithoutEventNestedInput
  startTime: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutEventsNestedInput
}

input EventUpdateWithoutCommentsInput {
  categories: CategoryUpdateManyWithoutEventsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  endTime: NullableDateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  likes: LikeUpdateManyWithoutEventNestedInput
  location: StringFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutEventNestedInput
  rsvps: RSVPUpdateManyWithoutEventNestedInput
  startTime: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutEventsNestedInput
}

input EventUpdateWithoutLikesInput {
  categories: CategoryUpdateManyWithoutEventsNestedInput
  comments: CommentUpdateManyWithoutEventNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  endTime: NullableDateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  location: StringFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutEventNestedInput
  rsvps: RSVPUpdateManyWithoutEventNestedInput
  startTime: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutEventsNestedInput
}

input EventUpdateWithoutPostInput {
  categories: CategoryUpdateManyWithoutEventsNestedInput
  comments: CommentUpdateManyWithoutEventNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  endTime: NullableDateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  likes: LikeUpdateManyWithoutEventNestedInput
  location: StringFieldUpdateOperationsInput
  rsvps: RSVPUpdateManyWithoutEventNestedInput
  startTime: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutEventsNestedInput
}

input EventUpdateWithoutRsvpsInput {
  categories: CategoryUpdateManyWithoutEventsNestedInput
  comments: CommentUpdateManyWithoutEventNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  endTime: NullableDateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  likes: LikeUpdateManyWithoutEventNestedInput
  location: StringFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutEventNestedInput
  startTime: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutEventsNestedInput
}

input EventUpdateWithoutUserInput {
  categories: CategoryUpdateManyWithoutEventsNestedInput
  comments: CommentUpdateManyWithoutEventNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  endTime: NullableDateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  likes: LikeUpdateManyWithoutEventNestedInput
  location: StringFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutEventNestedInput
  rsvps: RSVPUpdateManyWithoutEventNestedInput
  startTime: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EventUpsertWithWhereUniqueWithoutCategoriesInput {
  create: EventCreateWithoutCategoriesInput!
  update: EventUpdateWithoutCategoriesInput!
  where: EventWhereUniqueInput!
}

input EventUpsertWithWhereUniqueWithoutUserInput {
  create: EventCreateWithoutUserInput!
  update: EventUpdateWithoutUserInput!
  where: EventWhereUniqueInput!
}

input EventUpsertWithoutCommentsInput {
  create: EventCreateWithoutCommentsInput!
  update: EventUpdateWithoutCommentsInput!
  where: EventWhereInput
}

input EventUpsertWithoutLikesInput {
  create: EventCreateWithoutLikesInput!
  update: EventUpdateWithoutLikesInput!
  where: EventWhereInput
}

input EventUpsertWithoutPostInput {
  create: EventCreateWithoutPostInput!
  update: EventUpdateWithoutPostInput!
  where: EventWhereInput
}

input EventUpsertWithoutRsvpsInput {
  create: EventCreateWithoutRsvpsInput!
  update: EventUpdateWithoutRsvpsInput!
  where: EventWhereInput
}

input EventWhereInput {
  AND: [EventWhereInput!]
  NOT: [EventWhereInput!]
  OR: [EventWhereInput!]
  categories: CategoryListRelationFilter
  comments: CommentListRelationFilter
  createdAt: DateTimeFilter
  description: StringFilter
  endTime: DateTimeNullableFilter
  id: IntFilter
  image: StringNullableFilter
  likes: LikeListRelationFilter
  location: StringFilter
  post: PostScalarRelationFilter
  postId: IntFilter
  rsvps: RSVPListRelationFilter
  startTime: DateTimeFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  user: UserScalarRelationFilter
  userId: IntFilter
}

input EventWhereUniqueInput {
  AND: [EventWhereInput!]
  NOT: [EventWhereInput!]
  OR: [EventWhereInput!]
  categories: CategoryListRelationFilter
  comments: CommentListRelationFilter
  createdAt: DateTimeFilter
  description: StringFilter
  endTime: DateTimeNullableFilter
  id: Int
  image: StringNullableFilter
  likes: LikeListRelationFilter
  location: StringFilter
  post: PostScalarRelationFilter
  postId: Int
  rsvps: RSVPListRelationFilter
  startTime: DateTimeFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  user: UserScalarRelationFilter
  userId: IntFilter
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type Like {
  createdAt: DateTime!
  event: Event
  eventId: Int
  id: ID!
  post: Post
  postId: Int
  user: User!
  userId: Int!
}

type LikeAvgAggregate {
  eventId: Float
  id: Float
  postId: Float
  userId: Float
}

type LikeCountAggregate {
  _all: Int!
  createdAt: Int!
  eventId: Int!
  id: Int!
  postId: Int!
  userId: Int!
}

input LikeCreateInput {
  createdAt: DateTime
  event: EventCreateNestedOneWithoutLikesInput
  post: PostCreateNestedOneWithoutLikesInput
  user: UserCreateNestedOneWithoutLikesInput!
}

input LikeCreateManyEventInput {
  createdAt: DateTime
  id: Int
  postId: Int
  userId: Int!
}

input LikeCreateManyEventInputEnvelope {
  data: [LikeCreateManyEventInput!]!
}

input LikeCreateManyPostInput {
  createdAt: DateTime
  eventId: Int
  id: Int
  userId: Int!
}

input LikeCreateManyPostInputEnvelope {
  data: [LikeCreateManyPostInput!]!
}

input LikeCreateManyUserInput {
  createdAt: DateTime
  eventId: Int
  id: Int
  postId: Int
}

input LikeCreateManyUserInputEnvelope {
  data: [LikeCreateManyUserInput!]!
}

input LikeCreateNestedManyWithoutEventInput {
  connect: [LikeWhereUniqueInput!]
  connectOrCreate: [LikeCreateOrConnectWithoutEventInput!]
  create: [LikeCreateWithoutEventInput!]
  createMany: LikeCreateManyEventInputEnvelope
}

input LikeCreateNestedManyWithoutPostInput {
  connect: [LikeWhereUniqueInput!]
  connectOrCreate: [LikeCreateOrConnectWithoutPostInput!]
  create: [LikeCreateWithoutPostInput!]
  createMany: LikeCreateManyPostInputEnvelope
}

input LikeCreateNestedManyWithoutUserInput {
  connect: [LikeWhereUniqueInput!]
  connectOrCreate: [LikeCreateOrConnectWithoutUserInput!]
  create: [LikeCreateWithoutUserInput!]
  createMany: LikeCreateManyUserInputEnvelope
}

input LikeCreateOrConnectWithoutEventInput {
  create: LikeCreateWithoutEventInput!
  where: LikeWhereUniqueInput!
}

input LikeCreateOrConnectWithoutPostInput {
  create: LikeCreateWithoutPostInput!
  where: LikeWhereUniqueInput!
}

input LikeCreateOrConnectWithoutUserInput {
  create: LikeCreateWithoutUserInput!
  where: LikeWhereUniqueInput!
}

input LikeCreateWithoutEventInput {
  createdAt: DateTime
  post: PostCreateNestedOneWithoutLikesInput
  user: UserCreateNestedOneWithoutLikesInput!
}

input LikeCreateWithoutPostInput {
  createdAt: DateTime
  event: EventCreateNestedOneWithoutLikesInput
  user: UserCreateNestedOneWithoutLikesInput!
}

input LikeCreateWithoutUserInput {
  createdAt: DateTime
  event: EventCreateNestedOneWithoutLikesInput
  post: PostCreateNestedOneWithoutLikesInput
}

input LikeListRelationFilter {
  every: LikeWhereInput
  none: LikeWhereInput
  some: LikeWhereInput
}

type LikeMaxAggregate {
  createdAt: DateTime
  eventId: Int
  id: Int
  postId: Int
  userId: Int
}

type LikeMinAggregate {
  createdAt: DateTime
  eventId: Int
  id: Int
  postId: Int
  userId: Int
}

input LikeScalarWhereInput {
  AND: [LikeScalarWhereInput!]
  NOT: [LikeScalarWhereInput!]
  OR: [LikeScalarWhereInput!]
  createdAt: DateTimeFilter
  eventId: IntNullableFilter
  id: IntFilter
  postId: IntNullableFilter
  userId: IntFilter
}

type LikeSumAggregate {
  eventId: Int
  id: Int
  postId: Int
  userId: Int
}

input LikeUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
}

input LikeUpdateManyWithWhereWithoutEventInput {
  data: LikeUpdateManyMutationInput!
  where: LikeScalarWhereInput!
}

input LikeUpdateManyWithWhereWithoutPostInput {
  data: LikeUpdateManyMutationInput!
  where: LikeScalarWhereInput!
}

input LikeUpdateManyWithWhereWithoutUserInput {
  data: LikeUpdateManyMutationInput!
  where: LikeScalarWhereInput!
}

input LikeUpdateManyWithoutEventNestedInput {
  connect: [LikeWhereUniqueInput!]
  connectOrCreate: [LikeCreateOrConnectWithoutEventInput!]
  create: [LikeCreateWithoutEventInput!]
  createMany: LikeCreateManyEventInputEnvelope
  delete: [LikeWhereUniqueInput!]
  deleteMany: [LikeScalarWhereInput!]
  disconnect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutEventInput!]
  updateMany: [LikeUpdateManyWithWhereWithoutEventInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutEventInput!]
}

input LikeUpdateManyWithoutPostNestedInput {
  connect: [LikeWhereUniqueInput!]
  connectOrCreate: [LikeCreateOrConnectWithoutPostInput!]
  create: [LikeCreateWithoutPostInput!]
  createMany: LikeCreateManyPostInputEnvelope
  delete: [LikeWhereUniqueInput!]
  deleteMany: [LikeScalarWhereInput!]
  disconnect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [LikeUpdateManyWithWhereWithoutPostInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutPostInput!]
}

input LikeUpdateManyWithoutUserNestedInput {
  connect: [LikeWhereUniqueInput!]
  connectOrCreate: [LikeCreateOrConnectWithoutUserInput!]
  create: [LikeCreateWithoutUserInput!]
  createMany: LikeCreateManyUserInputEnvelope
  delete: [LikeWhereUniqueInput!]
  deleteMany: [LikeScalarWhereInput!]
  disconnect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [LikeUpdateManyWithWhereWithoutUserInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutUserInput!]
}

input LikeUpdateWithWhereUniqueWithoutEventInput {
  data: LikeUpdateWithoutEventInput!
  where: LikeWhereUniqueInput!
}

input LikeUpdateWithWhereUniqueWithoutPostInput {
  data: LikeUpdateWithoutPostInput!
  where: LikeWhereUniqueInput!
}

input LikeUpdateWithWhereUniqueWithoutUserInput {
  data: LikeUpdateWithoutUserInput!
  where: LikeWhereUniqueInput!
}

input LikeUpdateWithoutEventInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  post: PostUpdateOneWithoutLikesNestedInput
  user: UserUpdateOneRequiredWithoutLikesNestedInput
}

input LikeUpdateWithoutPostInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  event: EventUpdateOneWithoutLikesNestedInput
  user: UserUpdateOneRequiredWithoutLikesNestedInput
}

input LikeUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  event: EventUpdateOneWithoutLikesNestedInput
  post: PostUpdateOneWithoutLikesNestedInput
}

input LikeUpsertWithWhereUniqueWithoutEventInput {
  create: LikeCreateWithoutEventInput!
  update: LikeUpdateWithoutEventInput!
  where: LikeWhereUniqueInput!
}

input LikeUpsertWithWhereUniqueWithoutPostInput {
  create: LikeCreateWithoutPostInput!
  update: LikeUpdateWithoutPostInput!
  where: LikeWhereUniqueInput!
}

input LikeUpsertWithWhereUniqueWithoutUserInput {
  create: LikeCreateWithoutUserInput!
  update: LikeUpdateWithoutUserInput!
  where: LikeWhereUniqueInput!
}

input LikeUserIdPostIdEventIdCompoundUniqueInput {
  eventId: Int!
  postId: Int!
  userId: Int!
}

input LikeWhereInput {
  AND: [LikeWhereInput!]
  NOT: [LikeWhereInput!]
  OR: [LikeWhereInput!]
  createdAt: DateTimeFilter
  event: EventNullableScalarRelationFilter
  eventId: IntNullableFilter
  id: IntFilter
  post: PostNullableScalarRelationFilter
  postId: IntNullableFilter
  user: UserScalarRelationFilter
  userId: IntFilter
}

input LikeWhereUniqueInput {
  AND: [LikeWhereInput!]
  NOT: [LikeWhereInput!]
  OR: [LikeWhereInput!]
  createdAt: DateTimeFilter
  event: EventNullableScalarRelationFilter
  eventId: IntNullableFilter
  id: Int
  post: PostNullableScalarRelationFilter
  postId: IntNullableFilter
  user: UserScalarRelationFilter
  userId: IntFilter
  userId_postId_eventId: LikeUserIdPostIdEventIdCompoundUniqueInput
}

input LoginDto {
  email: String!
  password: String!
}

type Mutation {
  create(createPostInput: CreatePostInput!): Post!
  createCategory(createCategoryInput: CategoryCreateInput!): Category!
  createComment(createCommentInput: CreateCommentInput!): Comment!
  createEvent(createEventInput: EventCreateInput!): Event!
  createLike(createLikeInput: LikeCreateInput!): Like!
  createNotification(createNotificationInput: CreateNotificationInput!): Notification!
  createRsvp(createRsvpInput: CreateRsvpInput!): RSVP!
  createUser(createUserInput: UserCreateInput!): User!
  login(loginInput: LoginDto!): AuthResponse!

  """resfreshes access and refresh tokens"""
  refreshTokens: AuthResponse!

  """for creating a new user"""
  register(createUserInput: UserCreateInput!): User!
  remove(id: Float!): Post!
  removeCategory(id: Int!): Category!
  removeComment(id: Int!): Comment!
  removeEvent(id: Int!): Event!
  removeLike(id: Int!): Like!
  removeNotification(id: Int!): Notification!
  removeRsvp(id: Int!): RSVP!
  removeUser(id: Int!): User!
  update(updatePostInput: UpdatePostInput!): Post!
  updateCategory(updateCategoryInput: UpdateCategoryInput!): Category!
  updateComment(id: Int!, updateCommentInput: CommentUpdateInput!): Comment!
  updateEvent(updateEventInput: UpdateEventInput!): Event!
  updateLike(updateLikeInput: UpdateLikeInput!): Like!
  updateNotification(updateNotificationInput: UpdateNotificationInput!): Notification!
  updateRsvp(updateRsvpInput: UpdateRsvpInput!): RSVP!
  updateUser(updateUserInput: UpdateUserInput!): User!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Notification {
  content: String!
  createdAt: DateTime!
  id: ID!
  isRead: Boolean!
  referenceId: Int
  type: String!
  user: User!
  userId: Int!
}

type NotificationAvgAggregate {
  id: Float
  referenceId: Float
  userId: Float
}

type NotificationCountAggregate {
  _all: Int!
  content: Int!
  createdAt: Int!
  id: Int!
  isRead: Int!
  referenceId: Int!
  type: Int!
  userId: Int!
}

input NotificationCreateManyUserInput {
  content: String!
  createdAt: DateTime
  id: Int
  isRead: Boolean
  referenceId: Int
  type: String!
}

input NotificationCreateManyUserInputEnvelope {
  data: [NotificationCreateManyUserInput!]!
}

input NotificationCreateNestedManyWithoutUserInput {
  connect: [NotificationWhereUniqueInput!]
  connectOrCreate: [NotificationCreateOrConnectWithoutUserInput!]
  create: [NotificationCreateWithoutUserInput!]
  createMany: NotificationCreateManyUserInputEnvelope
}

input NotificationCreateOrConnectWithoutUserInput {
  create: NotificationCreateWithoutUserInput!
  where: NotificationWhereUniqueInput!
}

input NotificationCreateWithoutUserInput {
  content: String!
  createdAt: DateTime
  isRead: Boolean
  referenceId: Int
  type: String!
}

input NotificationListRelationFilter {
  every: NotificationWhereInput
  none: NotificationWhereInput
  some: NotificationWhereInput
}

type NotificationMaxAggregate {
  content: String
  createdAt: DateTime
  id: Int
  isRead: Boolean
  referenceId: Int
  type: String
  userId: Int
}

type NotificationMinAggregate {
  content: String
  createdAt: DateTime
  id: Int
  isRead: Boolean
  referenceId: Int
  type: String
  userId: Int
}

input NotificationScalarWhereInput {
  AND: [NotificationScalarWhereInput!]
  NOT: [NotificationScalarWhereInput!]
  OR: [NotificationScalarWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  isRead: BoolFilter
  referenceId: IntNullableFilter
  type: StringFilter
  userId: IntFilter
}

type NotificationSumAggregate {
  id: Int
  referenceId: Int
  userId: Int
}

input NotificationUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  isRead: BoolFieldUpdateOperationsInput
  referenceId: NullableIntFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
}

input NotificationUpdateManyWithWhereWithoutUserInput {
  data: NotificationUpdateManyMutationInput!
  where: NotificationScalarWhereInput!
}

input NotificationUpdateManyWithoutUserNestedInput {
  connect: [NotificationWhereUniqueInput!]
  connectOrCreate: [NotificationCreateOrConnectWithoutUserInput!]
  create: [NotificationCreateWithoutUserInput!]
  createMany: NotificationCreateManyUserInputEnvelope
  delete: [NotificationWhereUniqueInput!]
  deleteMany: [NotificationScalarWhereInput!]
  disconnect: [NotificationWhereUniqueInput!]
  set: [NotificationWhereUniqueInput!]
  update: [NotificationUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [NotificationUpdateManyWithWhereWithoutUserInput!]
  upsert: [NotificationUpsertWithWhereUniqueWithoutUserInput!]
}

input NotificationUpdateWithWhereUniqueWithoutUserInput {
  data: NotificationUpdateWithoutUserInput!
  where: NotificationWhereUniqueInput!
}

input NotificationUpdateWithoutUserInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  isRead: BoolFieldUpdateOperationsInput
  referenceId: NullableIntFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
}

input NotificationUpsertWithWhereUniqueWithoutUserInput {
  create: NotificationCreateWithoutUserInput!
  update: NotificationUpdateWithoutUserInput!
  where: NotificationWhereUniqueInput!
}

input NotificationWhereInput {
  AND: [NotificationWhereInput!]
  NOT: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  isRead: BoolFilter
  referenceId: IntNullableFilter
  type: StringFilter
  user: UserScalarRelationFilter
  userId: IntFilter
}

input NotificationWhereUniqueInput {
  AND: [NotificationWhereInput!]
  NOT: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: Int
  isRead: BoolFilter
  referenceId: IntNullableFilter
  type: StringFilter
  user: UserScalarRelationFilter
  userId: IntFilter
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Post {
  _count: PostCount!
  categories: [Category!]
  comments: [Comment!]
  content: String!
  createdAt: DateTime!
  event: Event
  id: ID!
  image: String
  isEvent: Boolean!
  likes: [Like!]
  updatedAt: DateTime!
  user: User!
  userId: Int!
}

type PostAvgAggregate {
  id: Float
  userId: Float
}

type PostCount {
  categories: Int!
  comments: Int!
  likes: Int!
}

type PostCountAggregate {
  _all: Int!
  content: Int!
  createdAt: Int!
  id: Int!
  image: Int!
  isEvent: Int!
  updatedAt: Int!
  userId: Int!
}

input PostCreateManyUserInput {
  content: String!
  createdAt: DateTime
  id: Int
  image: String
  isEvent: Boolean
  updatedAt: DateTime
}

input PostCreateManyUserInputEnvelope {
  data: [PostCreateManyUserInput!]!
}

input PostCreateNestedManyWithoutCategoriesInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutCategoriesInput!]
  create: [PostCreateWithoutCategoriesInput!]
}

input PostCreateNestedManyWithoutUserInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutUserInput!]
  create: [PostCreateWithoutUserInput!]
  createMany: PostCreateManyUserInputEnvelope
}

input PostCreateNestedOneWithoutCommentsInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutCommentsInput
  create: PostCreateWithoutCommentsInput
}

input PostCreateNestedOneWithoutEventInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutEventInput
  create: PostCreateWithoutEventInput
}

input PostCreateNestedOneWithoutLikesInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutLikesInput
  create: PostCreateWithoutLikesInput
}

input PostCreateOrConnectWithoutCategoriesInput {
  create: PostCreateWithoutCategoriesInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutEventInput {
  create: PostCreateWithoutEventInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutLikesInput {
  create: PostCreateWithoutLikesInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutUserInput {
  create: PostCreateWithoutUserInput!
  where: PostWhereUniqueInput!
}

input PostCreateWithoutCategoriesInput {
  comments: CommentCreateNestedManyWithoutPostInput
  content: String!
  createdAt: DateTime
  event: EventCreateNestedOneWithoutPostInput
  image: String
  isEvent: Boolean
  likes: LikeCreateNestedManyWithoutPostInput
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutPostsInput!
}

input PostCreateWithoutCommentsInput {
  categories: CategoryCreateNestedManyWithoutPostsInput
  content: String!
  createdAt: DateTime
  event: EventCreateNestedOneWithoutPostInput
  image: String
  isEvent: Boolean
  likes: LikeCreateNestedManyWithoutPostInput
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutPostsInput!
}

input PostCreateWithoutEventInput {
  categories: CategoryCreateNestedManyWithoutPostsInput
  comments: CommentCreateNestedManyWithoutPostInput
  content: String!
  createdAt: DateTime
  image: String
  isEvent: Boolean
  likes: LikeCreateNestedManyWithoutPostInput
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutPostsInput!
}

input PostCreateWithoutLikesInput {
  categories: CategoryCreateNestedManyWithoutPostsInput
  comments: CommentCreateNestedManyWithoutPostInput
  content: String!
  createdAt: DateTime
  event: EventCreateNestedOneWithoutPostInput
  image: String
  isEvent: Boolean
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutPostsInput!
}

input PostCreateWithoutUserInput {
  categories: CategoryCreateNestedManyWithoutPostsInput
  comments: CommentCreateNestedManyWithoutPostInput
  content: String!
  createdAt: DateTime
  event: EventCreateNestedOneWithoutPostInput
  image: String
  isEvent: Boolean
  likes: LikeCreateNestedManyWithoutPostInput
  updatedAt: DateTime
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

type PostMaxAggregate {
  content: String
  createdAt: DateTime
  id: Int
  image: String
  isEvent: Boolean
  updatedAt: DateTime
  userId: Int
}

type PostMinAggregate {
  content: String
  createdAt: DateTime
  id: Int
  image: String
  isEvent: Boolean
  updatedAt: DateTime
  userId: Int
}

input PostNullableScalarRelationFilter {
  is: PostWhereInput
  isNot: PostWhereInput
}

input PostScalarRelationFilter {
  is: PostWhereInput
  isNot: PostWhereInput
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  image: StringNullableFilter
  isEvent: BoolFilter
  updatedAt: DateTimeFilter
  userId: IntFilter
}

type PostSumAggregate {
  id: Int
  userId: Int
}

input PostUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  isEvent: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateManyWithWhereWithoutCategoriesInput {
  data: PostUpdateManyMutationInput!
  where: PostScalarWhereInput!
}

input PostUpdateManyWithWhereWithoutUserInput {
  data: PostUpdateManyMutationInput!
  where: PostScalarWhereInput!
}

input PostUpdateManyWithoutCategoriesNestedInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutCategoriesInput!]
  create: [PostCreateWithoutCategoriesInput!]
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutCategoriesInput!]
  updateMany: [PostUpdateManyWithWhereWithoutCategoriesInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutCategoriesInput!]
}

input PostUpdateManyWithoutUserNestedInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutUserInput!]
  create: [PostCreateWithoutUserInput!]
  createMany: PostCreateManyUserInputEnvelope
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [PostUpdateManyWithWhereWithoutUserInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutUserInput!]
}

input PostUpdateOneRequiredWithoutEventNestedInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutEventInput
  create: PostCreateWithoutEventInput
  update: PostUpdateToOneWithWhereWithoutEventInput
  upsert: PostUpsertWithoutEventInput
}

input PostUpdateOneWithoutCommentsNestedInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutCommentsInput
  create: PostCreateWithoutCommentsInput
  delete: PostWhereInput
  disconnect: PostWhereInput
  update: PostUpdateToOneWithWhereWithoutCommentsInput
  upsert: PostUpsertWithoutCommentsInput
}

input PostUpdateOneWithoutLikesNestedInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutLikesInput
  create: PostCreateWithoutLikesInput
  delete: PostWhereInput
  disconnect: PostWhereInput
  update: PostUpdateToOneWithWhereWithoutLikesInput
  upsert: PostUpsertWithoutLikesInput
}

input PostUpdateToOneWithWhereWithoutCommentsInput {
  data: PostUpdateWithoutCommentsInput!
  where: PostWhereInput
}

input PostUpdateToOneWithWhereWithoutEventInput {
  data: PostUpdateWithoutEventInput!
  where: PostWhereInput
}

input PostUpdateToOneWithWhereWithoutLikesInput {
  data: PostUpdateWithoutLikesInput!
  where: PostWhereInput
}

input PostUpdateWithWhereUniqueWithoutCategoriesInput {
  data: PostUpdateWithoutCategoriesInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithWhereUniqueWithoutUserInput {
  data: PostUpdateWithoutUserInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithoutCategoriesInput {
  comments: CommentUpdateManyWithoutPostNestedInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  event: EventUpdateOneWithoutPostNestedInput
  image: NullableStringFieldUpdateOperationsInput
  isEvent: BoolFieldUpdateOperationsInput
  likes: LikeUpdateManyWithoutPostNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutPostsNestedInput
}

input PostUpdateWithoutCommentsInput {
  categories: CategoryUpdateManyWithoutPostsNestedInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  event: EventUpdateOneWithoutPostNestedInput
  image: NullableStringFieldUpdateOperationsInput
  isEvent: BoolFieldUpdateOperationsInput
  likes: LikeUpdateManyWithoutPostNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutPostsNestedInput
}

input PostUpdateWithoutEventInput {
  categories: CategoryUpdateManyWithoutPostsNestedInput
  comments: CommentUpdateManyWithoutPostNestedInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  isEvent: BoolFieldUpdateOperationsInput
  likes: LikeUpdateManyWithoutPostNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutPostsNestedInput
}

input PostUpdateWithoutLikesInput {
  categories: CategoryUpdateManyWithoutPostsNestedInput
  comments: CommentUpdateManyWithoutPostNestedInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  event: EventUpdateOneWithoutPostNestedInput
  image: NullableStringFieldUpdateOperationsInput
  isEvent: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutPostsNestedInput
}

input PostUpdateWithoutUserInput {
  categories: CategoryUpdateManyWithoutPostsNestedInput
  comments: CommentUpdateManyWithoutPostNestedInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  event: EventUpdateOneWithoutPostNestedInput
  image: NullableStringFieldUpdateOperationsInput
  isEvent: BoolFieldUpdateOperationsInput
  likes: LikeUpdateManyWithoutPostNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpsertWithWhereUniqueWithoutCategoriesInput {
  create: PostCreateWithoutCategoriesInput!
  update: PostUpdateWithoutCategoriesInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithWhereUniqueWithoutUserInput {
  create: PostCreateWithoutUserInput!
  update: PostUpdateWithoutUserInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput!
  update: PostUpdateWithoutCommentsInput!
  where: PostWhereInput
}

input PostUpsertWithoutEventInput {
  create: PostCreateWithoutEventInput!
  update: PostUpdateWithoutEventInput!
  where: PostWhereInput
}

input PostUpsertWithoutLikesInput {
  create: PostCreateWithoutLikesInput!
  update: PostUpdateWithoutLikesInput!
  where: PostWhereInput
}

input PostWhereInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  categories: CategoryListRelationFilter
  comments: CommentListRelationFilter
  content: StringFilter
  createdAt: DateTimeFilter
  event: EventNullableScalarRelationFilter
  id: IntFilter
  image: StringNullableFilter
  isEvent: BoolFilter
  likes: LikeListRelationFilter
  updatedAt: DateTimeFilter
  user: UserScalarRelationFilter
  userId: IntFilter
}

input PostWhereUniqueInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  categories: CategoryListRelationFilter
  comments: CommentListRelationFilter
  content: StringFilter
  createdAt: DateTimeFilter
  event: EventNullableScalarRelationFilter
  id: Int
  image: StringNullableFilter
  isEvent: BoolFilter
  likes: LikeListRelationFilter
  updatedAt: DateTimeFilter
  user: UserScalarRelationFilter
  userId: IntFilter
}

type Query {
  categories: [Category!]!
  category(id: Int!): Category!
  comment(id: Int!): Comment!
  comments: [Comment!]!
  event(id: Int!): Event!
  events: [Event!]!
  like(id: Int!): Like!
  likes: [Like!]!
  notification(id: Int!): Notification!
  notifications: [Notification!]!
  post(id: Float!): Post!
  posts: [Post!]!
  rsvp(id: Int!): RSVP!
  rsvps: [RSVP!]!
  user(id: Int!): User!
  users: [User!]!
}

type RSVP {
  createdAt: DateTime!
  event: Event!
  eventId: Int!
  id: ID!
  status: String!
  user: User!
  userId: Int!
}

type RSVPAvgAggregate {
  eventId: Float
  id: Float
  userId: Float
}

type RSVPCountAggregate {
  _all: Int!
  createdAt: Int!
  eventId: Int!
  id: Int!
  status: Int!
  userId: Int!
}

input RSVPCreateManyEventInput {
  createdAt: DateTime
  id: Int
  status: String
  userId: Int!
}

input RSVPCreateManyEventInputEnvelope {
  data: [RSVPCreateManyEventInput!]!
}

input RSVPCreateManyUserInput {
  createdAt: DateTime
  eventId: Int!
  id: Int
  status: String
}

input RSVPCreateManyUserInputEnvelope {
  data: [RSVPCreateManyUserInput!]!
}

input RSVPCreateNestedManyWithoutEventInput {
  connect: [RSVPWhereUniqueInput!]
  connectOrCreate: [RSVPCreateOrConnectWithoutEventInput!]
  create: [RSVPCreateWithoutEventInput!]
  createMany: RSVPCreateManyEventInputEnvelope
}

input RSVPCreateNestedManyWithoutUserInput {
  connect: [RSVPWhereUniqueInput!]
  connectOrCreate: [RSVPCreateOrConnectWithoutUserInput!]
  create: [RSVPCreateWithoutUserInput!]
  createMany: RSVPCreateManyUserInputEnvelope
}

input RSVPCreateOrConnectWithoutEventInput {
  create: RSVPCreateWithoutEventInput!
  where: RSVPWhereUniqueInput!
}

input RSVPCreateOrConnectWithoutUserInput {
  create: RSVPCreateWithoutUserInput!
  where: RSVPWhereUniqueInput!
}

input RSVPCreateWithoutEventInput {
  createdAt: DateTime
  status: String
  user: UserCreateNestedOneWithoutRsvpsInput!
}

input RSVPCreateWithoutUserInput {
  createdAt: DateTime
  event: EventCreateNestedOneWithoutRsvpsInput!
  status: String
}

input RSVPListRelationFilter {
  every: RSVPWhereInput
  none: RSVPWhereInput
  some: RSVPWhereInput
}

type RSVPMaxAggregate {
  createdAt: DateTime
  eventId: Int
  id: Int
  status: String
  userId: Int
}

type RSVPMinAggregate {
  createdAt: DateTime
  eventId: Int
  id: Int
  status: String
  userId: Int
}

input RSVPScalarWhereInput {
  AND: [RSVPScalarWhereInput!]
  NOT: [RSVPScalarWhereInput!]
  OR: [RSVPScalarWhereInput!]
  createdAt: DateTimeFilter
  eventId: IntFilter
  id: IntFilter
  status: StringFilter
  userId: IntFilter
}

type RSVPSumAggregate {
  eventId: Int
  id: Int
  userId: Int
}

input RSVPUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  status: StringFieldUpdateOperationsInput
}

input RSVPUpdateManyWithWhereWithoutEventInput {
  data: RSVPUpdateManyMutationInput!
  where: RSVPScalarWhereInput!
}

input RSVPUpdateManyWithWhereWithoutUserInput {
  data: RSVPUpdateManyMutationInput!
  where: RSVPScalarWhereInput!
}

input RSVPUpdateManyWithoutEventNestedInput {
  connect: [RSVPWhereUniqueInput!]
  connectOrCreate: [RSVPCreateOrConnectWithoutEventInput!]
  create: [RSVPCreateWithoutEventInput!]
  createMany: RSVPCreateManyEventInputEnvelope
  delete: [RSVPWhereUniqueInput!]
  deleteMany: [RSVPScalarWhereInput!]
  disconnect: [RSVPWhereUniqueInput!]
  set: [RSVPWhereUniqueInput!]
  update: [RSVPUpdateWithWhereUniqueWithoutEventInput!]
  updateMany: [RSVPUpdateManyWithWhereWithoutEventInput!]
  upsert: [RSVPUpsertWithWhereUniqueWithoutEventInput!]
}

input RSVPUpdateManyWithoutUserNestedInput {
  connect: [RSVPWhereUniqueInput!]
  connectOrCreate: [RSVPCreateOrConnectWithoutUserInput!]
  create: [RSVPCreateWithoutUserInput!]
  createMany: RSVPCreateManyUserInputEnvelope
  delete: [RSVPWhereUniqueInput!]
  deleteMany: [RSVPScalarWhereInput!]
  disconnect: [RSVPWhereUniqueInput!]
  set: [RSVPWhereUniqueInput!]
  update: [RSVPUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [RSVPUpdateManyWithWhereWithoutUserInput!]
  upsert: [RSVPUpsertWithWhereUniqueWithoutUserInput!]
}

input RSVPUpdateWithWhereUniqueWithoutEventInput {
  data: RSVPUpdateWithoutEventInput!
  where: RSVPWhereUniqueInput!
}

input RSVPUpdateWithWhereUniqueWithoutUserInput {
  data: RSVPUpdateWithoutUserInput!
  where: RSVPWhereUniqueInput!
}

input RSVPUpdateWithoutEventInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  status: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutRsvpsNestedInput
}

input RSVPUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  event: EventUpdateOneRequiredWithoutRsvpsNestedInput
  status: StringFieldUpdateOperationsInput
}

input RSVPUpsertWithWhereUniqueWithoutEventInput {
  create: RSVPCreateWithoutEventInput!
  update: RSVPUpdateWithoutEventInput!
  where: RSVPWhereUniqueInput!
}

input RSVPUpsertWithWhereUniqueWithoutUserInput {
  create: RSVPCreateWithoutUserInput!
  update: RSVPUpdateWithoutUserInput!
  where: RSVPWhereUniqueInput!
}

input RSVPUserIdEventIdCompoundUniqueInput {
  eventId: Int!
  userId: Int!
}

input RSVPWhereInput {
  AND: [RSVPWhereInput!]
  NOT: [RSVPWhereInput!]
  OR: [RSVPWhereInput!]
  createdAt: DateTimeFilter
  event: EventScalarRelationFilter
  eventId: IntFilter
  id: IntFilter
  status: StringFilter
  user: UserScalarRelationFilter
  userId: IntFilter
}

input RSVPWhereUniqueInput {
  AND: [RSVPWhereInput!]
  NOT: [RSVPWhereInput!]
  OR: [RSVPWhereInput!]
  createdAt: DateTimeFilter
  event: EventScalarRelationFilter
  eventId: IntFilter
  id: Int
  status: StringFilter
  user: UserScalarRelationFilter
  userId: IntFilter
  userId_eventId: RSVPUserIdEventIdCompoundUniqueInput
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type TokenPair {
  accessToken: String!
  refreshToken: String!
}

input UpdateCategoryInput {
  children: CategoryCreateNestedManyWithoutParentInput
  createdAt: DateTime
  events: EventCreateNestedManyWithoutCategoriesInput
  id: Int!
  name: String
  parent: CategoryCreateNestedOneWithoutChildrenInput
  posts: PostCreateNestedManyWithoutCategoriesInput
  slug: String
}

input UpdateEventInput {
  categories: CategoryCreateNestedManyWithoutEventsInput
  comments: CommentCreateNestedManyWithoutEventInput
  createdAt: DateTime
  description: String
  endTime: DateTime
  id: Int!
  image: String
  likes: LikeCreateNestedManyWithoutEventInput
  location: String
  post: PostCreateNestedOneWithoutEventInput
  rsvps: RSVPCreateNestedManyWithoutEventInput
  startTime: DateTime
  title: String
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutEventsInput
}

input UpdateLikeInput {
  createdAt: DateTime
  event: EventCreateNestedOneWithoutLikesInput
  id: Int!
  post: PostCreateNestedOneWithoutLikesInput
  user: UserCreateNestedOneWithoutLikesInput
}

input UpdateNotificationInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input UpdatePostInput {
  content: String
  id: Int!
  image: String
  isEvent: Boolean
}

input UpdateRsvpInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input UpdateUserInput {
  avatar: String
  bio: String
  comments: CommentCreateNestedManyWithoutUserInput
  createdAt: DateTime
  email: String
  events: EventCreateNestedManyWithoutUserInput
  id: Int!
  likes: LikeCreateNestedManyWithoutUserInput
  notifications: NotificationCreateNestedManyWithoutUserInput
  password: String
  posts: PostCreateNestedManyWithoutUserInput
  role: String
  rsvps: RSVPCreateNestedManyWithoutUserInput
  updatedAt: DateTime
  username: String
}

type User {
  _count: UserCount!
  avatar: String
  bio: String
  comments: [Comment!]
  createdAt: DateTime!
  email: String!
  events: [Event!]
  id: ID!
  likes: [Like!]
  notifications: [Notification!]
  password: String!
  posts: [Post!]
  role: String
  rsvps: [RSVP!]
  updatedAt: DateTime!
  username: String!
}

type UserAvgAggregate {
  id: Float
}

type UserCount {
  comments: Int!
  events: Int!
  likes: Int!
  notifications: Int!
  posts: Int!
  rsvps: Int!
}

type UserCountAggregate {
  _all: Int!
  avatar: Int!
  bio: Int!
  createdAt: Int!
  email: Int!
  id: Int!
  password: Int!
  role: Int!
  updatedAt: Int!
  username: Int!
}

input UserCreateInput {
  avatar: String
  bio: String
  comments: CommentCreateNestedManyWithoutUserInput
  createdAt: DateTime
  email: String!
  events: EventCreateNestedManyWithoutUserInput
  likes: LikeCreateNestedManyWithoutUserInput
  notifications: NotificationCreateNestedManyWithoutUserInput
  password: String!
  posts: PostCreateNestedManyWithoutUserInput
  role: String
  rsvps: RSVPCreateNestedManyWithoutUserInput
  updatedAt: DateTime
  username: String!
}

input UserCreateNestedOneWithoutCommentsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCommentsInput
  create: UserCreateWithoutCommentsInput
}

input UserCreateNestedOneWithoutEventsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutEventsInput
  create: UserCreateWithoutEventsInput
}

input UserCreateNestedOneWithoutLikesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutLikesInput
  create: UserCreateWithoutLikesInput
}

input UserCreateNestedOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  create: UserCreateWithoutPostsInput
}

input UserCreateNestedOneWithoutRsvpsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutRsvpsInput
  create: UserCreateWithoutRsvpsInput
}

input UserCreateOrConnectWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutEventsInput {
  create: UserCreateWithoutEventsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutLikesInput {
  create: UserCreateWithoutLikesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutRsvpsInput {
  create: UserCreateWithoutRsvpsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutCommentsInput {
  avatar: String
  bio: String
  createdAt: DateTime
  email: String!
  events: EventCreateNestedManyWithoutUserInput
  likes: LikeCreateNestedManyWithoutUserInput
  notifications: NotificationCreateNestedManyWithoutUserInput
  password: String!
  posts: PostCreateNestedManyWithoutUserInput
  role: String
  rsvps: RSVPCreateNestedManyWithoutUserInput
  updatedAt: DateTime
  username: String!
}

input UserCreateWithoutEventsInput {
  avatar: String
  bio: String
  comments: CommentCreateNestedManyWithoutUserInput
  createdAt: DateTime
  email: String!
  likes: LikeCreateNestedManyWithoutUserInput
  notifications: NotificationCreateNestedManyWithoutUserInput
  password: String!
  posts: PostCreateNestedManyWithoutUserInput
  role: String
  rsvps: RSVPCreateNestedManyWithoutUserInput
  updatedAt: DateTime
  username: String!
}

input UserCreateWithoutLikesInput {
  avatar: String
  bio: String
  comments: CommentCreateNestedManyWithoutUserInput
  createdAt: DateTime
  email: String!
  events: EventCreateNestedManyWithoutUserInput
  notifications: NotificationCreateNestedManyWithoutUserInput
  password: String!
  posts: PostCreateNestedManyWithoutUserInput
  role: String
  rsvps: RSVPCreateNestedManyWithoutUserInput
  updatedAt: DateTime
  username: String!
}

input UserCreateWithoutPostsInput {
  avatar: String
  bio: String
  comments: CommentCreateNestedManyWithoutUserInput
  createdAt: DateTime
  email: String!
  events: EventCreateNestedManyWithoutUserInput
  likes: LikeCreateNestedManyWithoutUserInput
  notifications: NotificationCreateNestedManyWithoutUserInput
  password: String!
  role: String
  rsvps: RSVPCreateNestedManyWithoutUserInput
  updatedAt: DateTime
  username: String!
}

input UserCreateWithoutRsvpsInput {
  avatar: String
  bio: String
  comments: CommentCreateNestedManyWithoutUserInput
  createdAt: DateTime
  email: String!
  events: EventCreateNestedManyWithoutUserInput
  likes: LikeCreateNestedManyWithoutUserInput
  notifications: NotificationCreateNestedManyWithoutUserInput
  password: String!
  posts: PostCreateNestedManyWithoutUserInput
  role: String
  updatedAt: DateTime
  username: String!
}

type UserMaxAggregate {
  avatar: String
  bio: String
  createdAt: DateTime
  email: String
  id: Int
  password: String
  role: String
  updatedAt: DateTime
  username: String
}

type UserMinAggregate {
  avatar: String
  bio: String
  createdAt: DateTime
  email: String
  id: Int
  password: String
  role: String
  updatedAt: DateTime
  username: String
}

input UserScalarRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

type UserSumAggregate {
  id: Int
}

input UserUpdateOneRequiredWithoutCommentsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCommentsInput
  create: UserCreateWithoutCommentsInput
  update: UserUpdateToOneWithWhereWithoutCommentsInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneRequiredWithoutEventsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutEventsInput
  create: UserCreateWithoutEventsInput
  update: UserUpdateToOneWithWhereWithoutEventsInput
  upsert: UserUpsertWithoutEventsInput
}

input UserUpdateOneRequiredWithoutLikesNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutLikesInput
  create: UserCreateWithoutLikesInput
  update: UserUpdateToOneWithWhereWithoutLikesInput
  upsert: UserUpsertWithoutLikesInput
}

input UserUpdateOneRequiredWithoutPostsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  create: UserCreateWithoutPostsInput
  update: UserUpdateToOneWithWhereWithoutPostsInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateOneRequiredWithoutRsvpsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutRsvpsInput
  create: UserCreateWithoutRsvpsInput
  update: UserUpdateToOneWithWhereWithoutRsvpsInput
  upsert: UserUpsertWithoutRsvpsInput
}

input UserUpdateToOneWithWhereWithoutCommentsInput {
  data: UserUpdateWithoutCommentsInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutEventsInput {
  data: UserUpdateWithoutEventsInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutLikesInput {
  data: UserUpdateWithoutLikesInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutPostsInput {
  data: UserUpdateWithoutPostsInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutRsvpsInput {
  data: UserUpdateWithoutRsvpsInput!
  where: UserWhereInput
}

input UserUpdateWithoutCommentsInput {
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  events: EventUpdateManyWithoutUserNestedInput
  likes: LikeUpdateManyWithoutUserNestedInput
  notifications: NotificationUpdateManyWithoutUserNestedInput
  password: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutUserNestedInput
  role: NullableStringFieldUpdateOperationsInput
  rsvps: RSVPUpdateManyWithoutUserNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateWithoutEventsInput {
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  comments: CommentUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  likes: LikeUpdateManyWithoutUserNestedInput
  notifications: NotificationUpdateManyWithoutUserNestedInput
  password: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutUserNestedInput
  role: NullableStringFieldUpdateOperationsInput
  rsvps: RSVPUpdateManyWithoutUserNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateWithoutLikesInput {
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  comments: CommentUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  events: EventUpdateManyWithoutUserNestedInput
  notifications: NotificationUpdateManyWithoutUserNestedInput
  password: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutUserNestedInput
  role: NullableStringFieldUpdateOperationsInput
  rsvps: RSVPUpdateManyWithoutUserNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateWithoutPostsInput {
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  comments: CommentUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  events: EventUpdateManyWithoutUserNestedInput
  likes: LikeUpdateManyWithoutUserNestedInput
  notifications: NotificationUpdateManyWithoutUserNestedInput
  password: StringFieldUpdateOperationsInput
  role: NullableStringFieldUpdateOperationsInput
  rsvps: RSVPUpdateManyWithoutUserNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateWithoutRsvpsInput {
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  comments: CommentUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  events: EventUpdateManyWithoutUserNestedInput
  likes: LikeUpdateManyWithoutUserNestedInput
  notifications: NotificationUpdateManyWithoutUserNestedInput
  password: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutUserNestedInput
  role: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input UserUpsertWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput!
  update: UserUpdateWithoutCommentsInput!
  where: UserWhereInput
}

input UserUpsertWithoutEventsInput {
  create: UserCreateWithoutEventsInput!
  update: UserUpdateWithoutEventsInput!
  where: UserWhereInput
}

input UserUpsertWithoutLikesInput {
  create: UserCreateWithoutLikesInput!
  update: UserUpdateWithoutLikesInput!
  where: UserWhereInput
}

input UserUpsertWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  update: UserUpdateWithoutPostsInput!
  where: UserWhereInput
}

input UserUpsertWithoutRsvpsInput {
  create: UserCreateWithoutRsvpsInput!
  update: UserUpdateWithoutRsvpsInput!
  where: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  avatar: StringNullableFilter
  bio: StringNullableFilter
  comments: CommentListRelationFilter
  createdAt: DateTimeFilter
  email: StringFilter
  events: EventListRelationFilter
  id: IntFilter
  likes: LikeListRelationFilter
  notifications: NotificationListRelationFilter
  password: StringFilter
  posts: PostListRelationFilter
  role: StringNullableFilter
  rsvps: RSVPListRelationFilter
  updatedAt: DateTimeFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  avatar: StringNullableFilter
  bio: StringNullableFilter
  comments: CommentListRelationFilter
  createdAt: DateTimeFilter
  email: String
  events: EventListRelationFilter
  id: Int
  likes: LikeListRelationFilter
  notifications: NotificationListRelationFilter
  password: StringFilter
  posts: PostListRelationFilter
  role: StringNullableFilter
  rsvps: RSVPListRelationFilter
  updatedAt: DateTimeFilter
  username: String
}