// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator nestgraphql {
  provider = "node node_modules/prisma-nestjs-graphql"
  output   = "../src/@generated"
  reExport = "All"
}

generator markdown {
  provider = "prisma-markdown"
  output   = "./ERD.md"
  title    = "authentication"
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  username      String         @unique
  password      String
  avatar        String?        @default("/default-avatar.png")
  role          String?        @default("student")
  bio           String?
  posts         Post[]
  events        Event[]
  comments      Comment[]
  notifications Notification[]
  likes         Like[]
  rsvps         RSVP[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([email, username])
  @@map("users")
}

model Category {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  slug        String      @unique
  parentId    Int?
  parent      Category?   @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[]  @relation("CategoryHierarchy")
  posts       Post[]
  events      Event[]
  createdAt   DateTime    @default(now())

  @@index([parentId])
  @@map("categories")
}

model Post {
  id          Int          @id @default(autoincrement())
  content     String
  image       String?
  isEvent     Boolean      @default(false)
  event       Event?       @relation("PostedEvent", fields: [eventId], references: [id])
  eventId     Int?         @unique
  user        User         @relation(fields: [userId], references: [id])
  userId      Int
  categories  Category[]
  comments    Comment[]
  likes       Like[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([userId, createdAt])
  @@map("posts")
}

model Event {
  id           Int        @id @default(autoincrement())
  title        String
  description  String
  location     String
  startTime    DateTime
  endTime      DateTime?
  image        String?
  user         User       @relation(fields: [userId], references: [id])
  userId       Int
  shareAsPost  Boolean    @default(false)
  post         Post?      @relation("PostedEvent")
  categories   Category[]
  comments     Comment[]
  rsvps        RSVP[]
  likes        Like[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([userId, startTime])
  @@map("events")
}

model Comment {
  id          Int       @id @default(autoincrement())
  content     String
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  post        Post?     @relation(fields: [postId], references: [id])
  postId      Int?
  event       Event?    @relation(fields: [eventId], references: [id])
  eventId     Int?
  parent      Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  parentId    Int?
  replies     Comment[] @relation("CommentReplies")
  createdAt   DateTime  @default(now())

  @@index([userId, postId, eventId, parentId]) // Added indexes
  @@map("comments")
}

model Like {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  post        Post?     @relation(fields: [postId], references: [id])
  postId      Int?
  event       Event?    @relation(fields: [eventId], references: [id])
  eventId     Int?
  createdAt   DateTime  @default(now())

  @@unique([userId, postId, eventId]) // Added composite unique
  @@map("likes")
}

model RSVP {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  event       Event     @relation(fields: [eventId], references: [id])
  eventId     Int
  status      String    @default("going")
  createdAt   DateTime  @default(now())

  @@unique([userId, eventId]) 
  @@map("rsvps")
}

model Notification {
  id           Int       @id @default(autoincrement())
  user         User      @relation(fields: [userId], references: [id])
  userId       Int
  type         String
  content      String
  isRead       Boolean   @default(false)
  referenceId  Int?
  createdAt    DateTime  @default(now())

  @@index([userId, isRead, createdAt])
  @@map("notifications")
}
